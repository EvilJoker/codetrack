{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://codetrack/./src/extension.ts","webpack://codetrack/./src/filterView.ts","webpack://codetrack/./src/infrastructure/cache/globalCache.ts","webpack://codetrack/./src/infrastructure/constants/constants.ts","webpack://codetrack/./src/infrastructure/event/eventManager.ts","webpack://codetrack/./src/problemManager.ts","webpack://codetrack/external commonjs \"vscode\"","webpack://codetrack/external node-commonjs \"fs\"","webpack://codetrack/external node-commonjs \"path\"","webpack://codetrack/webpack/bootstrap","webpack://codetrack/webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport { FilterViewProvider as FilterViewProvider, loadProblems } from './filterView';\nimport { ProblemDataProvider } from './problemManager';\nimport { globalCache } from './infrastructure/cache/globalCache';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\n    // Use the console to output diagnostic information (console.log) and errors (console.error)\n    // This line of code will only be executed once when your extension is activated\n    console.log('Congratulations, your extension \"codetrack\" is now active!');\n\n    // The command has been defined in the package.json file\n    // Now provide the implementation of the command with registerCommand\n    // The commandId parameter must match the command field in package.json\n    const disposableTest = vscode.commands.registerCommand('codetrack.helloWorld', () => {\n        // The code you place here will be executed every time your command is executed\n        // Display a message box to the user\n        vscode.window.showInformationMessage('Hello World from codetrack!');\n    });\n\n    context.subscriptions.push(disposableTest);\n\n    // 初始化设置\n    globalCache.path = context.extensionPath;\n    // 加载数据 \n    loadProblems(globalCache.path);\n\n    // 注册 WebviewView\n    context.subscriptions.push(\n        vscode.window.registerWebviewViewProvider('filterView', new FilterViewProvider(context))\n    );\n\n    // 添加 TreeView 提供者\n    const problemDataProvider = new ProblemDataProvider(context);\n    const problemTreeView = vscode.window.createTreeView('problemListView', { treeDataProvider: problemDataProvider, showCollapseAll: true });\n    context.subscriptions.push(problemTreeView);\n\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() { }\n","import * as vscode from 'vscode';\nimport * as fs from 'fs';\nimport { EventManager, FILTEREVENT } from './infrastructure/event/eventManager';\nimport { globalCache } from './infrastructure/cache/globalCache';\nimport { DIFFICULTY_EASY, DIFFICULTY_EASY_ZH, DIFFICULTY_HARD, DIFFICULTY_HARD_ZH, DIFFICULTY_MEDIUM, DIFFICULTY_MEDIUM_ZH, ORDER_ASC, ORDER_ASC_ZH, ORDER_DESC_ZH, RECOMMEND_BASIC, RECOMMEND_BASIC_ZH, RECOMMEND_CHALLENGE, RECOMMEND_CHALLENGE_ZH, RECOMMEND_NEED, RECOMMEND_NEED_ZH, STATUS_DOING, STATUS_DOING_ZH, STATUS_DONE, STATUS_PLAN, STATUS_PLAN_ZH } from './infrastructure/constants/constants';\nimport path from 'path';\n\nexport class FilterViewProvider implements vscode.WebviewViewProvider {\n  public static readonly viewType = 'filterView';\n  private _view?: vscode.WebviewView;\n  // 新增全局变量 filters，并初始化为默认值\n\n  constructor(private readonly _extensionContext: vscode.ExtensionContext) {\n  }\n\n  resolveWebviewView(\n    webviewView: vscode.WebviewView,\n    context: vscode.WebviewViewResolveContext,\n    token: vscode.CancellationToken\n  ) {\n    this._view = webviewView;\n\n    webviewView.webview.options = {\n      enableScripts: true,\n    };\n\n    // 设置 HTML 内容\n    webviewView.webview.html = this.getHtmlForWebview();\n\n    // 监听刷新命令\n    vscode.commands.registerCommand('codetrack.refresh_filterView', () => {\n      this.refresh();\n    });\n\n    // 监听来自 Webview 的消息\n    webviewView.webview.onDidReceiveMessage((message) => {\n      switch (message.command) {\n        case 'search':\n          // todo 待实现\n          vscode.commands.executeCommand('customTreeView.filterData', message.text);\n          break;\n        case 'refreshConfig':\n          this.refreshConfig(message.filters);\n          break;\n      }\n    });\n\n  }\n\n\n  private refresh() {\n    // 加载数据\n    loadProblems(globalCache.path);\n    // 发送消息给其他视图，让它们自行刷新\n    EventManager.fireEvent(FILTEREVENT, globalCache.filters);\n\n  }\n\n  private getHtmlForWebview(): string {\n    return `\n            <!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <style>\n                    body {\n                        width: 100%; /* Set width to 100% */\n                        height: 10%; /* Set height to 100% */\n                        margin: 0;\n                        padding: 0;\n                    }\n                    .container {\n                        padding: 10px;\n                    }\n                </style>\n            </head>\n            <body>\n                <div class=\"container\">\n                    <label>问题路径：${globalCache.path}/problems</label>\n                    <hr>\n                    <label>推荐：</label>\n                    <label><input type=\"checkbox\" id=\"recommend_basic\" checked> ${RECOMMEND_BASIC_ZH}</label>\n                    <label><input type=\"checkbox\" id=\"recommend_need\" checked> ${RECOMMEND_NEED_ZH}</label>\n                    <label><input type=\"checkbox\" id=\"recommend_challenge\" checked> ${RECOMMEND_CHALLENGE_ZH}</label>\n                    <br>\n                    <label>状态：</label>\n                    <label><input type=\"checkbox\" id=\"status_plan\" checked> ${STATUS_PLAN_ZH}</label>\n                    <label><input type=\"checkbox\" id=\"status_doing\" checked> ${STATUS_DOING_ZH}</label>\n                    <label><input type=\"checkbox\" id=\"status_done\" checked> ${STATUS_DOING_ZH}</label>\n                    <br>\n                    <label>难度：</label>\n                    <label><input type=\"checkbox\" id=\"difficulty_easy\" checked> ${DIFFICULTY_EASY_ZH}</label>\n                    <label><input type=\"checkbox\" id=\"difficulty_mid\" checked> ${DIFFICULTY_MEDIUM_ZH}</label>\n                    <label><input type=\"checkbox\" id=\"difficulty_hard\" checked> ${DIFFICULTY_HARD_ZH}</label>\n                    <br>\n                    <label>排序：</label>\n                    <label><input type=\"radio\" name=\"order\" value=\"ascending\" checked > ${ORDER_ASC_ZH}</label>\n                    <label><input type=\"radio\" name=\"order\" value=\"descending\" > ${ORDER_DESC_ZH}</label>\n                    <hr>\n                    <label>标签：</label>\n                    ${globalCache.tags.map(tag => `<label><input type=\"checkbox\" id=\"tag_${tag}\" checked> ${tag}</label>`).join('')}\n                    <hr>\n                    <script>\n                    const vscode = acquireVsCodeApi();\n\n                    // 添加事件监听器\n                    document.querySelectorAll('input[type=\"checkbox\"], input[type=\"radio\"]').forEach(input => {\n                        input.addEventListener('change', () => {\n                            // 收集所有复选框和单选按钮的值\n                            const filters = {};\n                            document.querySelectorAll('input[type=\"checkbox\"]').forEach(checkbox => {\n                                filters[checkbox.id] = checkbox.checked;\n                            });\n                            document.querySelectorAll('input[type=\"radio\"]').forEach(radio => {\n                                if (radio.checked) {\n                                    filters[radio.name] = radio.value;\n                                }\n                            });\n                            vscode.postMessage({ command: 'refreshConfig', filters: filters });\n                        });\n                    });\n                    </script>\n                </div>\n            </body>\n            </html>\n        `;\n  }\n\n  // 修改 refreshConfig 函数，使其接受一个 map 值并更新 filters 变量\n  private refreshConfig(filters: { [key: string]: any }) {\n    globalCache.filters.recommend_basic = filters.recommend_basic !== undefined ? filters.recommend_basic : true;\n    globalCache.filters.recommend_need = filters.recommend_need !== undefined ? filters.recommend_need : true;\n    globalCache.filters.recommend_challenge = filters.recommend_challenge !== undefined ? filters.recommend_challenge : true;\n    globalCache.filters.status_plan = filters.status_plan !== undefined ? filters.status_plan : true;\n    globalCache.filters.status_doing = filters.status_doing !== undefined ? filters.status_doing : true;\n    globalCache.filters.status_done = filters.status_done !== undefined ? filters.status_done : true;\n    globalCache.filters.difficulty_easy = filters.difficulty_easy !== undefined ? filters.difficulty_easy : true;\n    globalCache.filters.difficulty_mid = filters.difficulty_mid !== undefined ? filters.difficulty_mid : true;\n    globalCache.filters.difficulty_hard = filters.difficulty_hard !== undefined ? filters.difficulty_hard : true;\n    globalCache.filters.order = filters.order !== undefined ? filters.order : ORDER_ASC;\n    console.log(\"refreshconfig\");\n    // 更新 tag\n    globalCache.filtertags = [];\n    for (const key in filters) {\n      if (key.startsWith('tag_') && filters[key] === true) {\n        let tag_value = key.substring(4);\n        globalCache.filtertags.push(tag_value); // 去掉 'tag_' 前缀\n      }\n    }\n    console.log(globalCache.filtertags);\n\n  }\n\n}\n\n\n\nexport function loadProblems(extensionPath: string): any[] {\n  const problems: any[] = [];\n  const problemListPath = path.join(extensionPath, 'problems');\n  if (fs.existsSync(problemListPath)) {\n    const files = fs.readdirSync(problemListPath);\n    files.forEach(file => {\n      const filePath = path.join(problemListPath, file, 'meta.json');\n      if (fs.existsSync(filePath)) {\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        const problem = JSON.parse(fileContent);\n        // 修改问题对象以匹配新的数据结构\n        problems.push({\n          name: problem.name,\n          name_zh: problem.name_zh,\n          description: problem.description,\n          description_zh: problem.description_zh,\n          meta: problem.meta,\n          info: problem.info,\n          tags: problem.tags\n        });\n      }\n    });\n  } else {\n    // 添加默认的问题列表，修改以匹配新的数据结构\n    problems.push({\n      name: \"问题1\",\n      name_zh: \"问题1\",\n      description: \"这是问题1的描述\",\n      description_zh: \"这是问题1的描述\",\n      meta: { difficulty: DIFFICULTY_EASY, recommend: RECOMMEND_BASIC },\n      info: { updateTime: \"2023-10-01T12:00:00Z\", status: STATUS_PLAN },\n      tags: [\"数组\"]\n    });\n    problems.push({\n      name: \"问题2\",\n      name_zh: \"问题2\",\n      description: \"这是问题2的描述\",\n      description_zh: \"这是问题2的描述\",\n      meta: { difficulty: DIFFICULTY_MEDIUM, recommend: RECOMMEND_NEED },\n      info: { updateTime: \"2023-10-01T12:00:00Z\", status: STATUS_PLAN },\n      tags: [\"数组\", \"哈希表\"]\n    });\n    problems.push({\n      name: \"问题3\",\n      name_zh: \"问题3\",\n      description: \"这是问题3的描述\",\n      description_zh: \"这是问题3的描述\",\n      meta: { difficulty: DIFFICULTY_HARD, recommend: RECOMMEND_CHALLENGE },\n      info: { updateTime: \"2023-10-01T12:00:00Z\", status: STATUS_PLAN },\n      tags: [\"数组\"]\n    });\n    problems.push({\n      name: \"问题4\",\n      name_zh: \"问题4\",\n      description: \"这是问题4的描述\",\n      description_zh: \"这是问题4的描述\",\n      meta: { difficulty: DIFFICULTY_EASY, recommend: RECOMMEND_BASIC },\n      info: { updateTime: \"2023-10-01T12:00:00Z\", status: STATUS_PLAN },\n      tags: [\"数组\"]\n    });\n    problems.push({\n      name: \"问题5\",\n      name_zh: \"问题5\",\n      description: \"这是问题5的描述\",\n      description_zh: \"这是问题5的描述\",\n      meta: { difficulty: DIFFICULTY_MEDIUM, recommend: RECOMMEND_NEED },\n      info: { updateTime: \"2023-10-01T12:00:00Z\", status: STATUS_PLAN },\n      tags: [\"数组\", \"哈希表\"]\n    });\n  }\n\n    // 提炼所有 problems 中的 tags 形成一个不重复的 tags 列表\n    const uniqueTags = getUniqueTags(problems);\n    globalCache.tags = uniqueTags;\n    if (globalCache.isInit) {\n      // 第一次初始化\n      globalCache.filtertags = uniqueTags;\n      globalCache.isInit = false;\n    }\n\n  // 根据 globalCache.filters 过滤问题列表\n  const filteredProblems = problems.filter(problem => {\n    return (globalCache.filters.recommend_basic || problem.meta.recommend !== RECOMMEND_BASIC) &&\n      (globalCache.filters.recommend_need || problem.meta.recommend !== RECOMMEND_NEED) &&\n      (globalCache.filters.recommend_challenge || problem.meta.recommend !== RECOMMEND_CHALLENGE) &&\n      (globalCache.filters.status_plan || problem.info.status !== STATUS_PLAN) &&\n      (globalCache.filters.status_doing || problem.info.status !== STATUS_DOING) &&\n      (globalCache.filters.status_done || problem.info.status !== STATUS_DONE) &&\n      (globalCache.filters.difficulty_easy || problem.meta.difficulty !== DIFFICULTY_EASY) &&\n      (globalCache.filters.difficulty_mid || problem.meta.difficulty !== DIFFICULTY_MEDIUM) &&\n      (globalCache.filters.difficulty_hard || problem.meta.difficulty !== DIFFICULTY_HARD) &&\n      (problem.tags.some((tag:string) => globalCache.filtertags.includes(tag)));\n  });\n\n  // 更新 globalCache.tags\n  globalCache.problems = filteredProblems; \n\n  return filteredProblems;\n}\n\n// 新增函数：提炼所有 problems 中的 tags 形成一个不重复的 tags 列表\nfunction getUniqueTags(problems: any[]): string[] {\n  const tagsSet = new Set<string>();\n  problems.forEach(problem => {\n    problem.tags.forEach((tag: string) => {\n      tagsSet.add(tag);\n    });\n  });\n  return Array.from(tagsSet);\n}","import { ORDER_ASC } from \"../constants/constants\";\n\nexport const globalCache = {\n    filters:  {\n        recommend_basic: true,\n        recommend_need: true,\n        recommend_challenge: true,\n        status_plan: true,\n        status_doing: true,\n        status_done: true,\n        difficulty_easy: true,\n        difficulty_mid: true,\n        difficulty_hard: true,\n        order: ORDER_ASC\n    } ,\n    tags:[] as string[],\n    filtertags:[] as string[],\n    isInit: true,\n    problems:[] as any[],\n    path: \"\" \n};\n\n","export const RECOMMEND_BASIC = 'basic';\nexport const RECOMMEND_BASIC_ZH = '基础';\nexport const RECOMMEND_NEED = 'need';\nexport const RECOMMEND_NEED_ZH = '中级';\nexport const RECOMMEND_CHALLENGE = 'challenge';\nexport const RECOMMEND_CHALLENGE_ZH = '高级';\nexport const STATUS_PLAN = 'plan';\nexport const STATUS_PLAN_ZH = '计划';\nexport const STATUS_DOING = 'doing';\nexport const STATUS_DOING_ZH = '进行';\nexport const STATUS_DONE = 'done';\nexport const STATUS_DONE_ZH = '完成';\nexport const DIFFICULTY_EASY = 'easy';\nexport const DIFFICULTY_EASY_ZH = '简单';\nexport const DIFFICULTY_MEDIUM = 'mid';\nexport const DIFFICULTY_MEDIUM_ZH = '中等';\nexport const DIFFICULTY_HARD = 'hard';\nexport const DIFFICULTY_HARD_ZH = '困难';\nexport const ORDER_ASC = 'ascending';\nexport const ORDER_ASC_ZH = '升序';\nexport const ORDER_DESC = 'descending';\nexport const ORDER_DESC_ZH = '降序';\n","import * as vscode from 'vscode';\nexport const FILTEREVENT='refreshData';\n\nexport class EventManager {\n  private static _onGlobalEvent = new vscode.EventEmitter<{ type: string, payload: any }>();\n  public static readonly onGlobalEvent = EventManager._onGlobalEvent.event;\n\n  public static fireEvent(type: string, payload: any) {\n    this._onGlobalEvent.fire({ type, payload });\n  }\n}\n","import * as vscode from 'vscode';\n\nimport { EventManager, FILTEREVENT } from './infrastructure/event/eventManager';\nimport { globalCache } from './infrastructure/cache/globalCache';\n\nexport class ProblemDataProvider implements vscode.TreeDataProvider<ProblemItem> {\n    private context: vscode.ExtensionContext;\n\n    private _onDidChangeTreeData: vscode.EventEmitter<ProblemItem | undefined | void> =\n    new vscode.EventEmitter<ProblemItem | undefined | void>();\n\n    readonly onDidChangeTreeData: vscode.Event<ProblemItem | undefined | void> = this._onDidChangeTreeData.event;\n\n\n    constructor(context: vscode.ExtensionContext) {\n        this.context = context;\n        EventManager.onGlobalEvent(({ type, payload }) => {\n            if (type === FILTEREVENT) {\n                console.log('TreeView 收到事件：', payload);\n                this.refresh(); // 刷新 TreeView\n            }\n        });\n    }\n\n    getTreeItem(element: ProblemItem): vscode.TreeItem {\n        return element;\n    }\n\n    getChildren(element?: ProblemItem): Thenable<ProblemItem[]> {\n        if (element) {\n            return Promise.resolve([]);\n        } else {\n            // 根据 filters 过滤问题列表\n            return Promise.resolve(globalCache.problems.map(problem => new ProblemItem(\n                problem.name,\n                problem.description,\n                problem.description_zh,\n                problem.meta,\n                problem.info,\n                problem.tags\n            )));\n        }\n    }\n\n    private refresh() {\n        // 触发 getChildren 函数\n        this._onDidChangeTreeData.fire();\n    }\n\n\n}\n\nexport class ProblemItem extends vscode.TreeItem {\n    constructor(\n        public readonly name: string,\n        public readonly description_info: string,\n        public readonly description_info_zh: string,\n        public readonly meta: { difficulty: string, recommend: string },\n        public readonly info: { updateTime: string, status: string },\n        public readonly tags: string[],\n        public readonly collapsibleState: vscode.TreeItemCollapsibleState = vscode.TreeItemCollapsibleState.None\n    ) {\n\n        // label + description 会被用来展示\n        super(name, collapsibleState);\n        this.description = `${this.meta.difficulty} - ${this.meta.recommend} - ${this.info.status} `;\n        this.tooltip = `${this.description_info_zh} - ${this.info.updateTime} - ${this.tags}`;\n    }\n}\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","disposableTest","vscode","commands","registerCommand","window","showInformationMessage","subscriptions","push","globalCache","path","extensionPath","loadProblems","registerWebviewViewProvider","FilterViewProvider","problemDataProvider","ProblemDataProvider","problemTreeView","createTreeView","treeDataProvider","showCollapseAll","problems","problemListPath","join","fs","existsSync","readdirSync","forEach","file","filePath","fileContent","readFileSync","problem","JSON","parse","name","name_zh","description","description_zh","meta","info","tags","difficulty","DIFFICULTY_EASY","recommend","RECOMMEND_BASIC","updateTime","status","STATUS_PLAN","DIFFICULTY_MEDIUM","RECOMMEND_NEED","DIFFICULTY_HARD","RECOMMEND_CHALLENGE","uniqueTags","tagsSet","Set","tag","add","Array","from","getUniqueTags","isInit","filtertags","filteredProblems","filter","filters","recommend_basic","recommend_need","recommend_challenge","status_plan","status_doing","STATUS_DOING","status_done","STATUS_DONE","difficulty_easy","difficulty_mid","difficulty_hard","some","includes","_extensionContext","static","_view","constructor","resolveWebviewView","webviewView","token","this","webview","options","enableScripts","html","getHtmlForWebview","refresh","onDidReceiveMessage","message","command","executeCommand","text","refreshConfig","EventManager","fireEvent","FILTEREVENT","RECOMMEND_BASIC_ZH","RECOMMEND_NEED_ZH","RECOMMEND_CHALLENGE_ZH","STATUS_PLAN_ZH","STATUS_DOING_ZH","DIFFICULTY_EASY_ZH","DIFFICULTY_MEDIUM_ZH","DIFFICULTY_HARD_ZH","ORDER_ASC_ZH","ORDER_DESC_ZH","map","undefined","order","ORDER_ASC","key","startsWith","tag_value","substring","STATUS_DONE_ZH","ORDER_DESC","EventEmitter","_onGlobalEvent","event","type","payload","fire","_onDidChangeTreeData","onDidChangeTreeData","onGlobalEvent","getTreeItem","element","getChildren","Promise","resolve","ProblemItem","TreeItem","description_info","description_info_zh","collapsibleState","TreeItemCollapsibleState","None","super","tooltip","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}